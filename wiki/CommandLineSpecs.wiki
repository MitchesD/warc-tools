#summary WARC Tools Command-line Specifications.
#labels Phase-Design,Phase-QA

= Introduction =

The following command-line specs are intended as a proof of concept to illustrate how you can build on the WARC standard enabled by libwarc. Feel free to add your own command-lines, as a wish list or otherwise.

Two important functions of these command-lines are:
 # a specification of use-cases
 # a test case specification

So if you contribute command-lines to this list, please add usage notes on how it may be used and how it may help test libwarc.

= Command-Line Specifications =

== warcdump ==
SRS 11-14, 27-28

`warcdump <warc_input> <flag>`

where:
 * <warc_input>: WARC input file name
 * <flag>: 1 means compressed with GZIP (default 0)


== warcfilter ==
SRS 16-20

`warcfilter <warc_input>  <flag> <match_string> <mime_uri>`

where :
 * <warc_input>: WARC input file name
 * <flag>    : 0 for uncompressed WARC
 * <match_string>: a string
 * <mime_uri>: 0 for MIME, 1 for URI

== warcappend ==
SRS 8-10

This command can easily be built with only few instructions using the WARC library.


== warcvalidator ==
SRS 31-32

`warcvalidator <warc_input>`

where:
 * <warc_input>: WARC input file name


== arc2warc ==
SRS 11-14, 15, 44

`arc2warc <arcfile> <aflag> <warcfile> <wflag>`

where:
 * arcfile : ARC input file name
 * aflag   : ARC compression  (0, means uncompressed)
 * warcfile: a WARC file
 * wflag   : WARC compression (1, means compressed with GZIP)


== warc-server ==
SRS 33-36, 37-38
`warc-server -d [-r <warcs_dir>]`

where:
 * -d: run the wserver as a daemon
 * -r: WARCs repository base path