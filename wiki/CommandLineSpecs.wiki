#summary WARC Tools Command-line Specifications.
#labels Phase-Design,Phase-QA

= Introduction =

The following command-line specs are intended as a proof of concept to illustrate how you can build on the WARC standard enabled by libwarc. Feel free to add your own command-lines, as a wish list or otherwise.

Two important functions of these command-lines are:
 # a specification of use-cases
 # a test case specification

So if you contribute command-lines to this list, please add usage notes on how it may be used and how it may help test libwarc.

= Command-Line Specifications =

== warcdump (done) ==
SRS 11-14, 27-28

Dump a WARC file

Usage: ./app/warcdump -f <file.warc> [-c]
  * -f    : valid WARC file name
  * [-c]  : GZIP compressed WARC (default true)


== warcfilter (done) ==
SRS 16-20

Filter WARC records based on MIME or URI

Usage: ./app/warcfilter -f <file.warc> [-c] -s <match> [-t]
  * -f    : valid WARC file name
  * [-c]  : GZIP compressed WARC (default true)
  * -s    : pattern string
  * [-t]  : compare with MIME (default true)

== warcappend ==
SRS 8-10

This command can easily be built with only few instructions using the WARC library.


== warcvalidator (done) ==
SRS 31-32

Check WARC file consistency

Usage: ./app/warcvalidator -f <file.warc> [-c] [-v]
  * -f    : valid WARC file name
  * [-c]  : GZIP compressed WARC (default true)
  * [-v]  : verbose mode (default true)


== arc2warc (done) ==
SRS 11-14, 15, 44

ARC to WARC convertor

Usage: ./app/arc2warc -a <file.arc> [-b] -f <file.warc> [-c]
  * -a    : valid ARC file name
  * [-b]  : GZIP compressed ARC (default true)
  * -f    : valid WARC file name
  * [-c]  : GZIP compressed WARC (default true)


== warcserver ==
SRS 33-36, 37-38

`warcserver -d [-r <warcs_dir>]`

where:
 * -d: run the wserver as a daemon
 * -r: WARCs repository base path